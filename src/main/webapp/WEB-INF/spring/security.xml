<?xml version = "1.0" encoding = "utf-8" ?>
<beans:beans
    xmlns:beans     = "http://www.springframework.org/schema/beans"
    xmlns:oauth     = "http://www.springframework.org/schema/security/oauth2"
    xmlns:security  = "http://www.springframework.org/schema/security"
    xmlns:xsi       = "http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation = "http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
        http://www.springframework.org/schema/security/oauth2
        http://www.springframework.org/schema/security/spring-security-oauth2-1.0.xsd
        http://www.springframework.org/schema/security
        http://www.springframework.org/schema/security/spring-security.xsd"
>
    <!-- Enable anotation for set permits -->
    <security:global-method-security
        access-decision-manager-ref = "accessDecisionManager"
        pre-post-annotations = "enabled"
        proxy-target-class = "false"
        secured-annotations = "enabled"
        jsr250-annotations = "enabled"
    />

    <!-- Authorization -->
    <security:http
        authentication-manager-ref = "authenticationManager"
        create-session = "stateless"
        pattern = "/oauth/token"
    >
        <security:access-denied-handler ref = "securityAccessDeniedHandler" />
        <security:anonymous enabled = "false" />
        <security:custom-filter
            before = "BASIC_AUTH_FILTER"
            ref = "clientCredentialsTokenEndpointFilter"
        />
        <security:http-basic entry-point-ref = "securityEntryPoint" />
        <security:intercept-url
            pattern = "/oauth/token"
            access = "IS_AUTHENTICATED_FULLY"
        />
    </security:http>

    <!-- Access to resources -->
    <security:http
        create-session = "never"
        entry-point-ref = "securityAuthenticationEntryPoint"
        pattern = "/**"
    >
        <security:access-denied-handler ref = "securityAccessDeniedHandler" />
        <security:anonymous enabled = "false" />
        <security:custom-filter
            before = "PRE_AUTH_FILTER"
            ref = "resourceServerFilter"
        />
        <security:intercept-url
            pattern = "/**"
            access = "IS_AUTHENTICATED_FULLY"
        />
    </security:http>

    <!-- BEAN :: SPRING -->
    <!-- OAuth authentication entry point -->
    <beans:bean
        id = "securityAuthenticationEntryPoint"
        class = "org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint"
    />

    <!-- Client authentication entry point -->
    <beans:bean
        id = "securityEntryPoint"
        class = "org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint"
    >
        <beans:property name = "realmName" value = "springsec/client" />
        <beans:property name = "typeName" value = "Basic" />
    </beans:bean>

    <!-- Access denied handler -->
    <beans:bean
        id = "securityAccessDeniedHandler"
        class = "org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler"
    />

    <!-- Client credentials token end-point filter -->
    <beans:bean
        id = "clientCredentialsTokenEndpointFilter"
        class = "org.springframework.security.oauth2.provider.client.ClientCredentialsTokenEndpointFilter"
    >
        <beans:property name = "authenticationManager" ref = "authenticationManager" />
    </beans:bean>

    <!-- Authentication manager -->
    <security:authentication-manager
        alias = "authenticationManager"
    >
        <security:authentication-provider user-service-ref = "clientDetailsUserService" />
    </security:authentication-manager>

    <beans:bean
        id = "clientDetailsUserService"
        class = "org.springframework.security.oauth2.provider.client.ClientDetailsUserDetailsService"
    >
        <beans:constructor-arg ref = "clientDetails" />
    </beans:bean>

    <beans:bean
        id = "clientDetails"
        class = "com.coffeine.virtuoso.module.security.model.service.implementation.GuestServiceImpl"
    ><!--TODO: use DB-->
        <beans:property name = "clientId" value = "developer" />
        <beans:property name = "clientSecretKey" value = "developer32" />
    </beans:bean>

    <security:authentication-manager id = "userAuthenticationManager">
        <security:authentication-provider ref="customUserAuthenticationProvider" />
    </security:authentication-manager>

    <beans:bean
        id = "customUserAuthenticationProvider"
        class = "com.coffeine.virtuoso.module.security.model.provider.implementation.UserAuthenticationProvider"
    />


    <!-- OAuth2 expressions -->
    <oauth:expression-handler id = "oauthExpressionHandler"/>

    <oauth:web-expression-handler id = "oauthWebExpressionHandler"/>

    <!-- Security OAuth2 server -->
    <oauth:authorization-server
        client-details-service-ref="clientDetails"
        token-services-ref="tokenServices"
    >
        <oauth:authorization-code />
        <oauth:implicit />
        <oauth:refresh-token />
        <oauth:client-credentials />
        <oauth:password
            authentication-manager-ref = "userAuthenticationManager"
        />
    </oauth:authorization-server>

    <oauth:resource-server
        id = "resourceServerFilter"
        resource-id = "springsec"
        token-services-ref = "tokenServices"
    />


    <beans:bean
        id = "tokenStore"
        class = "org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore"
    />

    <beans:bean
        id = "tokenServices"
        class = "org.springframework.security.oauth2.provider.token.DefaultTokenServices"
    >
        <beans:property name = "tokenStore" ref = "tokenStore" />
        <beans:property name = "supportRefreshToken" value = "true" />
        <beans:property name = "accessTokenValiditySeconds" value = "1800" />
        <beans:property name = "clientDetailsService" ref = "clientDetails" />
    </beans:bean>

    <!-- Password encoder -->
    <beans:bean
        id = "passwordEncoder"
        class = "org.springframework.security.authentication.encoding.ShaPasswordEncoder"
    />

    <!-- Access voters -->
    <bean
        id="accessDecisionManager"
        class="org.springframework.security.access.vote.UnanimousBased"
        xmlns="http://www.springframework.org/schema/beans"
    >
        <constructor-arg>
            <list>
                <bean class="org.springframework.security.oauth2.provider.vote.ScopeVoter"/>
                <bean class="org.springframework.security.access.vote.RoleVoter"/>
                <bean class="org.springframework.security.access.vote.AuthenticatedVoter"/>
            </list>
        </constructor-arg>
    </bean>

</beans:beans>
